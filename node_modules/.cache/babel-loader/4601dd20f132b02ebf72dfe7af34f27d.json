{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\scc_website\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport got from './images/got.jpg';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        0: 0,\n        1: 0,\n        2: 0,\n        3: 0\n      },\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var shuffledAnswerOptions = quizQuestions.map(function (question) {\n        return _this2.shuffleArray(question.answers);\n      });\n      this.setState({\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0]\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = 0; // While there remain elements to shuffle...\n\n      while (currentIndex !== 3) {\n        array[currentIndex] = currentIndex;\n        currentIndex += 1;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this3 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(function () {\n          return _this3.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this3.setResults(_this3.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      var updatedAnswersCount = update(this.state.answersCount, _defineProperty({}, answer, {\n        $apply: function $apply(currentValue) {\n          return currentValue + 1;\n        }\n      }));\n      this.setState({\n        answersCount: updatedAnswersCount,\n        answer: answer\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var answersCount = this.state.answersCount;\n      var answersCountKeys = Object.keys(answersCount);\n      var answersCountValues = answersCountKeys.map(function (key) {\n        return answersCount[key];\n      });\n      var maxAnswerCount = Math.max.apply(null, answersCountValues);\n      return answersCountKeys.filter(function (key) {\n        return answersCount[key] === maxAnswerCount;\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: 'Undetermined'\n        });\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: got,\n        className: \"App-img\",\n        alt: \"img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\HP\\Desktop\\scc_website\\src\\App.js"],"names":["React","Component","update","quizQuestions","Quiz","Result","got","App","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","event","setUserAnswer","currentTarget","value","length","setTimeout","setNextQuestion","setResults","getResults","updatedAnswersCount","$apply","currentValue","answersCountKeys","Object","keys","answersCountValues","key","maxAnswerCount","Math","max","apply","filter","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport update from 'react-addons-update';\r\nimport quizQuestions from './api/quizQuestions';\r\nimport Quiz from './components/Quiz';\r\nimport Result from './components/Result';\r\nimport got from './images/got.jpg';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            questionId: 1,\r\n            question: '',\r\n            answerOptions: [],\r\n            answer: '',\r\n            answersCount: {\r\n                0: 0,\r\n                1: 0,\r\n                2: 0,\r\n                3:0\r\n            },\r\n            result: ''\r\n        };\r\n\r\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n        this.setState({\r\n            question: quizQuestions[0].question,\r\n            answerOptions: shuffledAnswerOptions[0]\r\n        });\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = 0;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (currentIndex!==3) {\r\n            array[currentIndex] = currentIndex;\r\n            currentIndex += 1;\r\n\r\n\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    handleAnswerSelected(event) {\r\n        this.setUserAnswer(event.currentTarget.value);\r\n\r\n        if (this.state.questionId < quizQuestions.length) {\r\n            setTimeout(() => this.setNextQuestion(), 300);\r\n        } else {\r\n            setTimeout(() => this.setResults(this.getResults()), 300);\r\n        }\r\n    }\r\n\r\n    setUserAnswer(answer) {\r\n        const updatedAnswersCount = update(this.state.answersCount, {\r\n            [answer]: {$apply: (currentValue) => currentValue + 1}\r\n        });\r\n\r\n        this.setState({\r\n            answersCount: updatedAnswersCount,\r\n            answer: answer\r\n        });\r\n    }\r\n\r\n    setNextQuestion() {\r\n        const counter = this.state.counter + 1;\r\n        const questionId = this.state.questionId + 1;\r\n\r\n        this.setState({\r\n            counter: counter,\r\n            questionId: questionId,\r\n            question: quizQuestions[counter].question,\r\n            answerOptions: quizQuestions[counter].answers,\r\n            answer: ''\r\n        });\r\n    }\r\n\r\n    getResults() {\r\n        const answersCount = this.state.answersCount;\r\n        const answersCountKeys = Object.keys(answersCount);\r\n        const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\r\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n\r\n        return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\r\n    }\r\n\r\n    setResults(result) {\r\n        if (result.length === 1) {\r\n            this.setState({ result: result[0] });\r\n        } else {\r\n            this.setState({ result: 'Undetermined' });\r\n        }\r\n    }\r\n\r\n    renderQuiz() {\r\n        return (\r\n            <Quiz\r\n                answer={this.state.answer}\r\n                answerOptions={this.state.answerOptions}\r\n                questionId={this.state.questionId}\r\n                question={this.state.question}\r\n                questionTotal={quizQuestions.length}\r\n                onAnswerSelected={this.handleAnswerSelected}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderResult() {\r\n        return (\r\n            <Result quizResult={this.state.result} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-header\">\r\n                    <img src={got} className=\"App-img\" alt=\"img\" />\r\n\r\n                </div>\r\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}